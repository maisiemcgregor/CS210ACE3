Functions

MAIN
  I assume there should be some prompt asking if they wish to read from file or take their input.

READ FILE
  check length of file: 
    if each instruction is of length 12
    then (doclength % 12) should be equal to 0
  and
  check all values are either 0 or 1   (unless we plan to use hex values, I'm not sure)
    go through each character (are we reading the file as chars of ints? what is easier?)
    if current char is not a '0' or '1' then invalid file.

TAKE INPUT
  User should enter a binary number of length 12 
  Check input is valid,
  Continue until the user types some other character if they are finished adding input.
_________
CALL_INSTRUCTION
//I think a switch statement would be good to use here, though I have not used them in C yet
takes current oppcode
if opC = 0000 call HLT
if opC = 0001 call LDR
if opC = 0010 call STO
if opC = 0011 call SUB
if opC = 0100 call ADD
if opC = 0101 call INP
if opC = 0110 call OUT
if opC = 0111 call SKP
if opC = 1000 call JMP
_
if opC = 1001 call AND
if opC = 1010 call OR
if opC = 1011 call MUL

//something should happen if '1100' '1101' '1110' '1111' is the opcode
_________
INSTRUCTIONS

HLT (Halt) 
  //We might not even need a flag. If we use a while loop, we can have the program continue as long as the instruction isn't HLT. -Ryan
halt flag = 1   //mot sure if necessary
IP++

LDR (Load Register)
AC = operand
IP++

STO (Store)
  current operand = AC

SUB (Subtract)
  int carry;
  AC = AC - (contents of current address)
  (I think we also need to worry about over/underflow)
  (also in 2's complement)

ADD (Add)
  int carry;
  AC = AC + (contents of current address)
  (same issues with SUB)
  
INP (Input)
  scanf / fgets  
  AC = inputted value 
  (also need to validate and check the inputted value is legal)

OUT (Output)
  print AC

SKP (Skip)
  if (condition of opcode for IP+1 meets some condition)
    IP++
  else IP = (IP + 2)  //next instruction is skipped
  //reverse this if the condition should be false

JMP (Jump)
  IP = operand
___
AND (And)

OR (Or)

MUL (Multiply)
